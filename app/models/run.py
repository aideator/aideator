from datetime import datetime
from enum import Enum
from typing import Any

from sqlalchemy import JSON, Column, Integer, String
from sqlmodel import Field, SQLModel


class RunStatus(str, Enum):
    """Run status enumeration."""

    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class Run(SQLModel, table=True):
    """
    Database model for agent runs.

    Notes
    -----
    • `task_id` (int, auto-increment) is the **primary key** and user-visible identifier
    • `run_id` (str) is the old identifier that lives on for Kubernetes / logs
    """

    __tablename__ = "runs"

    # New primary key - auto-generated by database
    task_id: int | None = Field(
        default=None,
        sa_column=Column("task_id", Integer, primary_key=True, autoincrement=True, nullable=False),
    )

    # Legacy identifier – remains unique & indexed
    run_id: str = Field(
        sa_column=Column("run_id", String, unique=True, index=True),
        description="Legacy run identifier used in Kubernetes job names",
    )

    # --- Core columns ---
    github_url: str = Field(index=True)
    prompt: str
    variations: int = Field(default=1)  # Number of model variations to run
    status: RunStatus = Field(
        default=RunStatus.PENDING,
        sa_column=Column("status", String, nullable=False, index=True)
    )
    task_status: str = Field(default="open", index=True)

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    started_at: datetime | None = Field(default=None)
    completed_at: datetime | None = Field(default=None)

    # Configuration & metadata
    agent_config: dict[str, Any] = Field(default_factory=dict, sa_column=Column(JSON))
    run_metadata: dict[str, Any] | None = Field(default=None, sa_column=Column("metadata", JSON))
    user_id: str | None = Field(default=None, index=True)
    results: dict[str, Any] = Field(default_factory=dict, sa_column=Column(JSON))
    error_message: str | None = Field(default=None)

    # Statistics
    total_tokens_used: int | None = Field(default=None)
    total_cost_usd: float | None = Field(default=None)

    # ------------------------------------------------------------------
    # Back-compat helper so old code that references run.id keeps working
    # ------------------------------------------------------------------
    @property
    def id(self) -> str:
        """Alias for run_id kept for backward compatibility."""
        return self.run_id
