from datetime import datetime
from enum import Enum
from typing import Any

from sqlalchemy import JSON, Column, Integer, String
from sqlalchemy import Enum as SQLEnum
from sqlmodel import Field, SQLModel


class RunStatus(str, Enum):
    """Run status enumeration."""

    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class Run(SQLModel, table=True):
    """
    Database model for agent runs.

    Notes
    -----
    • `task_id` (int, auto-increment) is the **primary key** and user-visible identifier
    • `run_id` (str) is the old identifier that lives on for Kubernetes / logs
    """

    __tablename__ = "runs"

    # New primary key - auto-generated by database
    task_id: int | None = Field(
        default=None,
        sa_column=Column("task_id", Integer, primary_key=True, autoincrement=True, nullable=False),
    )

    # Legacy identifier – remains unique & indexed
    run_id: str = Field(
        sa_column=Column("run_id", String, unique=True, index=True),
        description="Legacy run identifier used in Kubernetes job names",
    )

    # --- Original columns (unchanged) ---
    github_url: str = Field(index=True)
    prompt: str
    variations: int
    status: RunStatus = Field(
        default=RunStatus.PENDING,
        index=True,
    )
    winning_variation_id: int | None = Field(default=None)
    task_status: str = Field(default="open", index=True)

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    started_at: datetime | None = Field(default=None)
    completed_at: datetime | None = Field(default=None)

    # Configuration & metadata
    agent_config: dict[str, Any] = Field(default_factory=dict, sa_column=Column(JSON))
    run_metadata: dict[str, Any] | None = Field(default=None, sa_column=Column("metadata", JSON))
    user_id: str | None = Field(default=None, index=True)
    api_key_id: str | None = Field(default=None, index=True)
    results: dict[str, Any] = Field(default_factory=dict, sa_column=Column(JSON))
    error_message: str | None = Field(default=None)

    # Statistics
    total_tokens_used: int | None = Field(default=None)
    total_cost_usd: float | None = Field(default=None)

    # ------------------------------------------------------------------
    # Back-compat helper so old code that references run.id keeps working
    # ------------------------------------------------------------------
    @property
    def id(self) -> str:  # noqa: D401,E741  (legacy field accessor)
        """Alias for run_id kept for backward compatibility."""
        return self.run_id


class AgentOutput(SQLModel, table=True):
    """
    Database model for agent outputs.

    FK is now `task_id → runs.task_id`.
    """

    __tablename__ = "agent_outputs"

    id: int | None = Field(default=None, primary_key=True)
    task_id: int = Field(foreign_key="runs.task_id", index=True)
    variation_id: int = Field(index=True)
    content: str
    timestamp: datetime = Field(default_factory=datetime.utcnow, index=True)
    output_type: str = Field(
        default="stdout"
    )  # stdout, stderr, status, summary, diffs, logging, addinfo
