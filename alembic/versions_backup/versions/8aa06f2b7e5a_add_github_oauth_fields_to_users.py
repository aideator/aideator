"""Add GitHub OAuth fields to users

Revision ID: 8aa06f2b7e5a
Revises: 003
Create Date: 2025-07-16 15:42:56.900194

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8aa06f2b7e5a'
down_revision: Union[str, None] = '003'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_runs_created_at'), table_name='runs')
    op.drop_index(op.f('ix_runs_github_url'), table_name='runs')
    op.drop_index(op.f('ix_runs_run_id'), table_name='runs')
    op.drop_index(op.f('ix_runs_status'), table_name='runs')
    op.drop_index(op.f('ix_runs_task_status'), table_name='runs')
    op.drop_index(op.f('ix_runs_user_id'), table_name='runs')
    op.drop_table('runs')
    op.add_column('users', sa.Column('github_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('users', sa.Column('github_username', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('users', sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_users_github_id'), 'users', ['github_id'], unique=True)
    op.create_index(op.f('ix_users_github_username'), 'users', ['github_username'], unique=False)
    op.drop_column('users', 'full_name')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_github_username'), table_name='users')
    op.drop_index(op.f('ix_users_github_id'), table_name='users')
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('users', 'name')
    op.drop_column('users', 'github_username')
    op.drop_column('users', 'github_id')
    op.create_table('runs',
    sa.Column('task_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('github_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('variations', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('task_status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('agent_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_cost_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('task_id', name=op.f('runs_pkey'))
    )
    op.create_index(op.f('ix_runs_user_id'), 'runs', ['user_id'], unique=False)
    op.create_index(op.f('ix_runs_task_status'), 'runs', ['task_status'], unique=False)
    op.create_index(op.f('ix_runs_status'), 'runs', ['status'], unique=False)
    op.create_index(op.f('ix_runs_run_id'), 'runs', ['run_id'], unique=True)
    op.create_index(op.f('ix_runs_github_url'), 'runs', ['github_url'], unique=False)
    op.create_index(op.f('ix_runs_created_at'), 'runs', ['created_at'], unique=False)
    # ### end Alembic commands ###