[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "aideator"
version = "0.1.0"
description = "LLM orchestration and analysis platform"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    "sqlmodel>=0.0.14",
    "asyncpg>=0.28.0",
    "aiosqlite>=0.19.0",
    "alembic>=1.13.0",
    "httpx>=0.25.0",
    "litellm>=1.0.0",
    "pydantic-settings>=2.0.0",
    "email-validator>=2.0.0",
    "structlog>=23.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "tenacity>=8.2.0",
    "prometheus-client>=0.19.0",
    "aiofiles>=24.1.0",
    "gitpython>=3.1.44",
    "litellm>=1.74.1",
    "ruff>=0.12.2",
    "python-dotenv>=1.0.0",
    "types-python-jose>=3.5.0.20250531",
    "ty>=0.0.1a14",
    "redis>=6.2.0",
]

[project.scripts]
# Database management
aideator-migrate = "scripts.migrate:main"
aideator-init-db = "scripts.init_db:main"
aideator-seed-db = "scripts.seed_database_wrapper:sync_main"

# Code quality
aideator-dead-code = "scripts.detect_dead_code:main"
aideator-fix-ruff = "fix_ruff_errors:main"

# Testing - Standard CNS Convention
test-all = "scripts.run_all_checks:main"
test-unit = "scripts.test_unit:main"
test-integration = "tests.run_integration_tests:main"
test-lint = "scripts.lint:main"
test-format = "scripts.format:main"
test-typecheck = "scripts.typecheck:main"

# Legacy aliases (keep for backward compatibility)
aideator-test-integration = "tests.run_integration_tests:main"
aideator-test-all = "scripts.run_all_checks:main"

# Application
aideator-agent = "agent.main_wrapper:sync_main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "ty>=0.0.1a14",
    "ruff>=0.1.0",
    "httpx>=0.25.0",
    "hypothesis>=6.90.0",
    "faker>=20.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    "playwright>=1.40.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "semgrep>=1.45.0",
    "psycopg2-binary>=2.9.0",
    "vulture>=2.11",
    "pytest-postgresql>=5.0.0",
]

[dependency-groups]
dev = [
    "knip>=0.0.3",
    "psycopg-binary>=3.2.9",
    "pytest-postgresql>=7.0.2",
]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
exclude = [".vulture_whitelist.py"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "T10",  # flake8-debugger
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "PTH",  # flake8-use-pathlib
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function calls in argument defaults (FastAPI Depends)
    "S101",    # use of assert (needed for tests)
    "PLR0913", # too many arguments
    "PLR2004", # Magic value comparison - too many false positives in tests
    "DTZ003",  # Use datetime.now(tz=utc) instead of utcnow() - breaking change
    "S105",    # Hardcoded password string - false positives in tests
    "PLC0415", # Import outside top-level - sometimes needed
    "RUF012",  # Mutable class default - false positives with Pydantic
    "B904",    # raise-without-from-inside-except - not always needed
    "SIM117",  # multiple-with-statements - sometimes clearer
    "PT011",   # pytest-raises-too-broad - match param not always needed
    "ARG001",  # unused-function-argument - common in callbacks/overrides
    "ARG002",  # unused-method-argument - common in inheritance
    "PLR0912", # too-many-branches - complex logic sometimes needed
    "PLR0915", # too-many-statements - complex methods exist
    "S110",    # try-except-pass - sometimes intentional
    "S603",    # subprocess-without-shell-equals-true - false positives
    "SIM105",  # suppressible-exception - not always clearer
    "PLR0911", # too-many-return-statements - sometimes clearer
    "PERF401", # manual-list-comprehension - not always clearer
    "S106",    # hardcoded-password-func-arg - false positive with "bearer"
    "DTZ005",  # call-datetime-now-without-tzinfo - would be breaking change
    "PT012",   # pytest-raises-with-multiple-statements - sometimes needed
    "S102",    # exec-builtin - needed for some tests
    "S607",    # start-process-with-partial-path - false positives
    "SIM102",  # collapsible-if - not always clearer
    "SIM115",  # open-file-with-context-handler - sometimes one-liner is ok
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "ARG001", "ARG002", "E402", "F401", "PTH118", "PTH120", "PTH123", "S104", "B007"]
"scripts/*" = ["T201"]
"alembic/*" = ["E402", "F403"]
"agent/main.py" = ["PTH207", "E722", "PTH109"]
"app/core/config.py" = ["S104", "S108"]
"app/services/encryption_service.py" = ["PLW0603"]
"app/services/kubernetes_service.py" = ["PTH123", "PTH108"]
"app/services/agent_orchestrator.py" = ["RUF006"]
"app/services/database_init.py" = ["B007"]

[tool.ruff.lint.isort]
known-first-party = ["app"]



[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
    "--cov-report=html",
    "--cov-report=xml",
    "-v",
    "--disable-warnings",
    "--timeout=300",
]
markers = [
    "unit: Unit tests (fast)",
    "integration: Integration tests (slower)",
    "e2e: End-to-end tests (slowest)",
    "slow: Slow tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "except ImportError:",
    "pass",
]


