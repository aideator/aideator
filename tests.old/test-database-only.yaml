apiVersion: batch/v1
kind: Job
metadata:
  name: "agent-database-only-test"
  namespace: aideator
  labels:
    app: aideator-agent
    run-id: "database-test"
    variation-id: "0"
    component: agent
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: aideator-agent
        run-id: "database-test"
        variation-id: "0"
        component: agent
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: agent
          image: "aideator-agent"
          imagePullPolicy: Never
          env:
            - name: RUN_ID
              value: "database-test"
            - name: VARIATION_ID
              value: "0"
            - name: DATABASE_URL
              value: "postgresql://aideator:aideator123@aideator-database:5432/aideator"
            - name: PYTHONUNBUFFERED
              value: "1"
          command: ["python", "-c"]
          args:
            - |
              import asyncio
              import sys
              sys.path.append('/app')
              from agent.services.database_service import DatabaseService
              
              async def test_db():
                  print("üß™ Starting database connectivity test...")
                  
                  try:
                      # Initialize database service
                      db_service = DatabaseService()
                      print("‚úÖ DatabaseService initialized")
                      
                      # Test connection
                      health = await db_service.health_check()
                      print(f"‚úÖ Database health check: {health}")
                      
                      if health:
                          # Test getting run by run_id
                          run = await db_service.get_run_by_run_id("database-test")
                          if run:
                              print(f"‚úÖ Found run: task_id={run.task_id}, run_id={run.run_id}")
                              
                              # Test writing agent output
                              success = await db_service.write_agent_output(
                                  task_id=run.task_id,
                                  variation_id=0,
                                  content="üéâ SUCCESS: Agent container can connect to database and write outputs!",
                                  output_type="status"
                              )
                              print(f"‚úÖ Database write test: {success}")
                              
                              # Write a log entry
                              await db_service.write_log(
                                  task_id=run.task_id,
                                  variation_id=0,
                                  log_message="Database connectivity test completed successfully",
                                  log_level="INFO"
                              )
                              print("‚úÖ Log write successful")
                              
                              print("üéâ ALL TESTS PASSED - Database connectivity working!")
                          else:
                              print("‚ùå Could not find run with run_id=database-test")
                      else:
                          print("‚ùå Database health check failed")
                      
                      await db_service.close()
                      
                  except Exception as e:
                      print(f"‚ùå Database test failed: {e}")
                      import traceback
                      traceback.print_exc()
                      sys.exit(1)
              
              asyncio.run(test_db())
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          volumeMounts:
            - name: workspace
              mountPath: /workspace
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 1Gi