apiVersion: batch/v1
kind: Job
metadata:
  name: "agent-outputs-write-test"
  namespace: aideator
  labels:
    app: aideator-agent
    run-id: "database-test"
    variation-id: "0"
    component: agent
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: aideator-agent
        run-id: "database-test"
        variation-id: "0"
        component: agent
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: agent
          image: "aideator-agent"
          imagePullPolicy: Never
          env:
            - name: RUN_ID
              value: "database-test"
            - name: VARIATION_ID
              value: "0"
            - name: DATABASE_URL
              value: "postgresql://aideator:aideator123@aideator-database:5432/aideator"
            - name: PYTHONUNBUFFERED
              value: "1"
          command: ["python", "-c"]
          args:
            - |
              import asyncio
              import sys
              from datetime import datetime
              sys.path.append('/app')
              from agent.services.database_service import DatabaseService
              
              async def test_agent_outputs_write():
                  print("üß™ Starting agent_outputs table write test...")
                  
                  try:
                      # Initialize database service
                      db_service = DatabaseService()
                      print("‚úÖ DatabaseService initialized")
                      
                      # Test connection
                      health = await db_service.health_check()
                      print(f"‚úÖ Database health check: {health}")
                      
                      if health:
                          # Get the test run
                          run = await db_service.get_run_by_run_id("database-test")
                          if run:
                              print(f"‚úÖ Found run: task_id={run.task_id}, run_id={run.run_id}")
                              
                              # Test different types of agent outputs
                              test_outputs = [
                                  ("stdout", "This is stdout output from the agent"),
                                  ("stderr", "This is stderr output from the agent"),
                                  ("status", "Agent is running and processing"),
                                  ("logging", "Log message: Agent initialized successfully"),
                                  ("summary", "Agent execution summary: Database connectivity verified"),
                                  ("diffs", "Code diff: + Added database connectivity test"),
                                  ("addinfo", "Additional info: All systems operational"),
                                  ("system", "System message: Container resources within limits")
                              ]
                              
                              print(f"üìù Writing {len(test_outputs)} different output types...")
                              
                              for i, (output_type, content) in enumerate(test_outputs):
                                  success = await db_service.write_agent_output(
                                      task_id=run.task_id,
                                      variation_id=0,
                                      content=f"[Test #{i+1}] {content}",
                                      output_type=output_type
                                  )
                                  print(f"‚úÖ Wrote {output_type}: {success}")
                              
                              # Write error messages
                              await db_service.write_error(
                                  task_id=run.task_id,
                                  variation_id=0,
                                  error_message="Test error: This is a simulated error for testing",
                                  error_type="TestError"
                              )
                              print("‚úÖ Wrote error message")
                              
                              # Write log entries
                              await db_service.write_log(
                                  task_id=run.task_id,
                                  variation_id=0,
                                  log_message="Database write test completed successfully",
                                  log_level="INFO"
                              )
                              print("‚úÖ Wrote log entry")
                              
                              # Write status update
                              await db_service.write_status_update(
                                  task_id=run.task_id,
                                  variation_id=0,
                                  status="testing_completed",
                                  metadata={"test_count": len(test_outputs), "timestamp": datetime.now().isoformat()}
                              )
                              print("‚úÖ Wrote status update")
                              
                              print("üéâ ALL WRITES COMPLETED - Verifying data...")
                              
                              # Now read back the data to prove it was written
                              # Use direct database query to verify
                              import asyncpg
                              conn = await asyncpg.connect('postgresql://aideator:aideator123@aideator-database:5432/aideator')
                              
                              # Count records we just wrote
                              count = await conn.fetchval(
                                  'SELECT COUNT(*) FROM agent_outputs WHERE task_id = $1 AND variation_id = $2',
                                  run.task_id, 0
                              )
                              print(f"‚úÖ Verification: Found {count} records in agent_outputs table")
                              
                              # Show sample records
                              records = await conn.fetch('''
                                  SELECT output_type, content, timestamp 
                                  FROM agent_outputs 
                                  WHERE task_id = $1 AND variation_id = $2 
                                  ORDER BY timestamp DESC 
                                  LIMIT 5
                              ''', run.task_id, 0)
                              
                              print("üìã Sample records from agent_outputs:")
                              for record in records:
                                  print(f"  - {record['output_type']}: {record['content'][:50]}...")
                              
                              await conn.close()
                              print("üéâ PROOF COMPLETE: Agent can successfully write to agent_outputs table!")
                              
                          else:
                              print("‚ùå Could not find run with run_id=database-test")
                      else:
                          print("‚ùå Database health check failed")
                      
                      await db_service.close()
                      
                  except Exception as e:
                      print(f"‚ùå Test failed: {e}")
                      import traceback
                      traceback.print_exc()
                      sys.exit(1)
              
              asyncio.run(test_agent_outputs_write())
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          volumeMounts:
            - name: workspace
              mountPath: /workspace
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 1Gi