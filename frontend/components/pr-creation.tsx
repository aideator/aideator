"use client"

import { useState, useMemo, useCallback } from "react"
import { Github, RefreshCw, ExternalLink, AlertTriangle, CheckCircle, Info } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { useAuth } from "@/components/auth/auth-provider"
import DiffViewer from "@/components/diff-viewer"

interface PRCreationProps {
  taskId: string
  variationId: number
  summary?: string
  diffContent?: string
  changedFiles: Array<{
    name: string
    additions: number
    deletions: number
  }>
  githubUrl?: string
}

export function PRCreation({
  taskId,
  variationId,
  summary,
  diffContent,
  changedFiles,
  githubUrl
}: PRCreationProps) {
  const { token } = useAuth()
  const [isCreating, setIsCreating] = useState(false)
  const [isCreated, setIsCreated] = useState(false)
  const [prUrl, setPrUrl] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [prTitle, setPrTitle] = useState(`AIdeator â€“ Task ${taskId} Variation ${variationId + 1}`)
  const [prDescription, setPrDescription] = useState(summary || "Automated changes generated by AIdeator.")
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})
  const [retryCount, setRetryCount] = useState(0)

  const handleCreatePR = async (currentRetryCount = 0) => {
    // Clear previous errors
    setError(null)
    
    // Validate form
    if (!isFormValid) {
      setError("Please fix validation errors before creating PR")
      return
    }

    if (!token) {
      setError("Authentication required")
      return
    }

    if (!githubUrl) {
      setError("No GitHub repository associated with this task")
      return
    }

    if (!diffContent) {
      setError("No changes available to create a pull request")
      return
    }

    try {
      setIsCreating(true)
      setRetryCount(currentRetryCount)

      const response = await fetch(
        `http://localhost:8000/api/v1/tasks/${taskId}/variations/${variationId}/pull-request`,
        {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title: prTitle.trim(),
            description: prDescription.trim(),
          }),
        }
      )

      if (!response.ok) {
        const errorText = await response.text()
        
        // Handle rate limiting with retry logic
        if (response.status === 429 && currentRetryCount < 3) {
          const retryDelay = Math.pow(2, currentRetryCount) * 1000 // Exponential backoff
          await new Promise(resolve => setTimeout(resolve, retryDelay))
          return handleCreatePR(currentRetryCount + 1)
        }
        
        // Handle specific error cases
        if (response.status === 403) {
          throw new Error("Access denied. Please check your repository permissions.")
        } else if (response.status === 404) {
          throw new Error("Task or variation not found.")
        } else if (response.status === 400) {
          throw new Error(`Invalid request: ${errorText}`)
        } else {
          throw new Error(`Failed to create PR: ${errorText}`)
        }
      }

      const data: { pr_url: string } = await response.json()
      setPrUrl(data.pr_url)
      setIsCreated(true)
      
      // Track success (if analytics available)
      if (typeof window !== 'undefined' && (window as any).analytics) {
        (window as any).analytics.track('pr_creation_success', {
          taskId,
          variationId,
          prUrl: data.pr_url,
          timestamp: new Date().toISOString()
        })
      }
    } catch (err) {
      console.error("PR creation error:", err)
      const errorMessage = err instanceof Error ? err.message : "Failed to create PR"
      setError(errorMessage)
      
      // Track error (if analytics available)
      if (typeof window !== 'undefined' && (window as any).analytics) {
        (window as any).analytics.track('pr_creation_error', {
          taskId,
          variationId,
          error: errorMessage,
          retryCount: currentRetryCount,
          timestamp: new Date().toISOString()
        })
      }
    } finally {
      setIsCreating(false)
    }
  }

  const handleViewPR = () => {
    if (prUrl) {
      window.open(prUrl, "_blank")
    }
  }

  if (isCreated && prUrl) {
    return (
      <Card className="bg-gray-900/50 border-green-700/50">
        <CardHeader>
          <div className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-400" />
            <CardTitle className="text-green-300">Pull Request Created</CardTitle>
          </div>
          <CardDescription className="text-gray-400">
            Your pull request has been successfully created on GitHub
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center gap-2">
            <Badge variant="outline" className="bg-green-900/30 border-green-700 text-green-300">
              Ready to Review
            </Badge>
            <span className="text-sm text-gray-400">
              {changedFiles.length} file{changedFiles.length !== 1 ? 's' : ''} changed
            </span>
          </div>
          <div className="flex gap-2">
            <Button onClick={handleViewPR} className="bg-green-600 hover:bg-green-700">
              <ExternalLink className="w-4 h-4 mr-2" />
              View on GitHub
            </Button>
            <Button 
              variant="outline" 
              onClick={() => {
                setIsCreated(false)
                setPrUrl(null)
                setError(null)
              }}
            >
              Create Another PR
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  // Validation functions
  const validateTitle = useCallback((title: string): string | null => {
    if (!title.trim()) return "PR title is required"
    if (title.length < 5) return "PR title must be at least 5 characters"
    if (title.length > 100) return "PR title must be less than 100 characters"
    return null
  }, [])

  const validateDescription = useCallback((description: string): string | null => {
    if (description.length > 2000) return "PR description must be less than 2000 characters"
    return null
  }, [])

  // Validate form on every render
  const validationErrors = useMemo(() => {
    const errors: Record<string, string> = {}
    
    const titleError = validateTitle(prTitle)
    if (titleError) errors.title = titleError
    
    const descriptionError = validateDescription(prDescription)
    if (descriptionError) errors.description = descriptionError
    
    return errors
  }, [prTitle, prDescription, validateTitle, validateDescription])

  // Check if we have the required data
  const hasRequiredData = useMemo(() => {
    return githubUrl && diffContent && changedFiles.length > 0
  }, [githubUrl, diffContent, changedFiles.length])

  // Check if form is valid
  const isFormValid = useMemo(() => {
    return hasRequiredData && Object.keys(validationErrors).length === 0
  }, [hasRequiredData, validationErrors])

  return (
    <Card className="bg-gray-900/50 border-gray-700/50">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Github className="w-5 h-5 text-gray-300" />
          <CardTitle>Create Pull Request</CardTitle>
        </div>
        <CardDescription className="text-gray-400">
          Create a GitHub pull request with the changes from this variation
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {error && (
          <div className="flex items-center gap-2 p-3 bg-red-950/50 border border-red-800 rounded-md">
            <AlertTriangle className="w-4 h-4 text-red-400" />
            <span className="text-red-300 text-sm">{error}</span>
          </div>
        )}

        {githubUrl && (
          <div className="text-sm text-gray-400">
            Repository: <span className="text-cyan-300">{githubUrl}</span>
          </div>
        )}

        <div className="space-y-2">
          <label htmlFor="pr-title" className="text-sm font-medium text-gray-300">
            PR Title <span className="text-red-400">*</span>
          </label>
          <Input
            id="pr-title"
            value={prTitle}
            onChange={(e) => setPrTitle(e.target.value)}
            className={`bg-gray-800 border-gray-700 text-gray-200 ${
              validationErrors.title ? 'border-red-500' : ''
            }`}
            placeholder="Enter pull request title"
            aria-describedby={validationErrors.title ? "title-error" : undefined}
            aria-invalid={!!validationErrors.title}
          />
          {validationErrors.title && (
            <p id="title-error" className="text-red-400 text-xs flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validationErrors.title}
            </p>
          )}
          <p className="text-gray-500 text-xs">
            {prTitle.length}/100 characters
          </p>
        </div>

        <div className="space-y-2">
          <label htmlFor="pr-description" className="text-sm font-medium text-gray-300">
            PR Description
          </label>
          <Textarea
            id="pr-description"
            value={prDescription}
            onChange={(e) => setPrDescription(e.target.value)}
            className={`bg-gray-800 border-gray-700 text-gray-200 min-h-[100px] ${
              validationErrors.description ? 'border-red-500' : ''
            }`}
            placeholder="Enter pull request description"
            aria-describedby={validationErrors.description ? "description-error" : undefined}
            aria-invalid={!!validationErrors.description}
          />
          {validationErrors.description && (
            <p id="description-error" className="text-red-400 text-xs flex items-center gap-1">
              <AlertTriangle className="w-3 h-3" />
              {validationErrors.description}
            </p>
          )}
          <p className="text-gray-500 text-xs">
            {prDescription.length}/2000 characters
          </p>
        </div>

        {changedFiles.length > 0 && (
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-300">Files to be changed</label>
            <div className="bg-gray-800/50 border border-gray-700 rounded-md p-3">
              <div className="space-y-1">
                {changedFiles.map((file) => (
                  <div key={file.name} className="flex justify-between items-center text-sm">
                    <span className="text-cyan-300">{file.name}</span>
                    <div className="font-mono text-xs">
                      <span className="text-green-400">+{file.additions}</span>{" "}
                      <span className="text-red-400">-{file.deletions}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {diffContent && (
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-300">Preview Changes</label>
            <div className="bg-gray-800/50 border border-gray-700 rounded-md overflow-hidden">
              <DiffViewer xmlData={diffContent} />
            </div>
          </div>
        )}

        <Button
          onClick={() => handleCreatePR()}
          disabled={isCreating || !token || !isFormValid}
          className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-700"
          aria-describedby="pr-button-description"
        >
          {isCreating ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              {retryCount > 0 ? `Retrying... (${retryCount}/3)` : "Creating PR..."}
            </>
          ) : (
            <>
              <Github className="w-4 h-4 mr-2" />
              Create Pull Request
            </>
          )}
        </Button>
        
        <p id="pr-button-description" className="text-xs text-gray-400 text-center">
          {!token && "Please log in with GitHub to create pull requests"}
          {!hasRequiredData && "Missing required data to create PR"}
          {Object.keys(validationErrors).length > 0 && "Please fix validation errors"}
          {isFormValid && "Ready to create pull request"}
        </p>

        {!token && (
          <div className="text-center text-sm text-gray-400">
            Please log in with GitHub to create pull requests
          </div>
        )}

        {!hasRequiredData && (
          <div className="bg-blue-950/30 border border-blue-800 rounded-md p-3">
            <div className="flex items-start gap-2">
              <Info className="w-4 h-4 text-blue-400 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-blue-300">
                <p className="font-medium mb-1">Requirements not met:</p>
                <ul className="space-y-1 text-xs">
                  {!githubUrl && <li>â€¢ No GitHub repository associated with this task</li>}
                  {!diffContent && <li>â€¢ No changes available to create a pull request</li>}
                  {changedFiles.length === 0 && <li>â€¢ No files have been modified</li>}
                </ul>
              </div>
            </div>
          </div>
        )}

        {hasRequiredData && (
          <div className="bg-green-950/30 border border-green-800 rounded-md p-3">
            <div className="flex items-start gap-2">
              <CheckCircle className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-green-300">
                <p className="font-medium mb-1">Ready to create PR:</p>
                <ul className="space-y-1 text-xs">
                  <li>â€¢ GitHub repository: {githubUrl?.replace('https://github.com/', '')}</li>
                  <li>â€¢ {changedFiles.length} file{changedFiles.length !== 1 ? 's' : ''} modified</li>
                  <li>â€¢ Diff content available</li>
                </ul>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}