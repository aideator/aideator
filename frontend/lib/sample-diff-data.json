{
  "files": [
    {
      "name": "src/components/UserProfile.tsx",
      "diff": "@@ -1,12 +1,18 @@\n import React from 'react'\n+import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'\n+import { Badge } from '@/components/ui/badge'\n \n-interface UserProfileProps {\n+interface User {\n+  id: string\n   name: string\n   email: string\n+  role: 'admin' | 'user' | 'moderator'\n+  avatar?: string\n }\n \n-export function UserProfile({ name, email }: UserProfileProps) {\n+interface UserProfileProps {\n+  user: User\n+  showRole?: boolean\n+}\n+\n+export function UserProfile({ user, showRole = true }: UserProfileProps) {\n   return (\n-    <div className=\"p-4 border rounded\">\n-      <h3>{name}</h3>\n-      <p>{email}</p>\n+    <div className=\"flex items-center gap-3 p-4 border rounded-lg bg-white shadow-sm\">\n+      <Avatar>\n+        <AvatarImage src={user.avatar} alt={user.name} />\n+        <AvatarFallback>{user.name.charAt(0).toUpperCase()}</AvatarFallback>\n+      </Avatar>\n+      <div className=\"flex-1\">\n+        <h3 className=\"font-semibold text-gray-900\">{user.name}</h3>\n+        <p className=\"text-sm text-gray-600\">{user.email}</p>\n+      </div>\n+      {showRole && (\n+        <Badge variant={user.role === 'admin' ? 'destructive' : 'secondary'}>\n+          {user.role}\n+        </Badge>\n+      )}\n     </div>\n   )\n }",
      "changes": "- Restructured component to accept a user object instead of individual name/email props\n- Added User interface with id, role, and optional avatar fields\n- Integrated shadcn/ui Avatar component for profile pictures with fallback initials\n- Added Badge component to display user roles with conditional styling\n- Enhanced styling with Tailwind classes for better visual design\n- Added optional showRole prop to control role badge visibility\n- Improved layout using flexbox for better alignment and spacing"
    },
    {
      "name": "src/utils/api.ts",
      "diff": "@@ -1,8 +1,24 @@\n+const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api'\n+\n+class APIError extends Error {\n+  constructor(public status: number, message: string) {\n+    super(message)\n+    this.name = 'APIError'\n+  }\n+}\n+\n export async function fetchUsers() {\n-  const response = await fetch('/api/users')\n-  return response.json()\n+  const response = await fetch(`${API_BASE_URL}/users`, {\n+    headers: {\n+      'Content-Type': 'application/json',\n+    },\n+  })\n+  \n+  if (!response.ok) {\n+    throw new APIError(response.status, `Failed to fetch users: ${response.statusText}`)\n+  }\n+  \n+  return response.json()\n }\n \n export async function createUser(userData: any) {\n-  const response = await fetch('/api/users', {\n+  const response = await fetch(`${API_BASE_URL}/users`, {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(userData),\n   })\n-  return response.json()\n+  \n+  if (!response.ok) {\n+    throw new APIError(response.status, `Failed to create user: ${response.statusText}`)\n+  }\n+  \n+  return response.json()\n }",
      "changes": "- Added configurable API_BASE_URL using environment variable with localhost fallback\n- Created custom APIError class for better error handling with status codes\n- Enhanced fetchUsers function with proper error handling and status checking\n- Enhanced createUser function with comprehensive error handling\n- Added consistent Content-Type headers to all requests\n- Improved error messages with descriptive status text\n- Made API calls more robust and production-ready"
    },
    {
      "name": "package.json",
      "diff": "@@ -10,8 +10,12 @@\n   },\n   \"dependencies\": {\n     \"react\": \"^18.2.0\",\n-    \"react-dom\": \"^18.2.0\"\n+    \"react-dom\": \"^18.2.0\",\n+    \"@radix-ui/react-avatar\": \"^1.0.4\",\n+    \"@radix-ui/react-badge\": \"^1.0.4\",\n+    \"class-variance-authority\": \"^0.7.0\",\n+    \"clsx\": \"^2.0.0\",\n+    \"tailwind-merge\": \"^2.0.0\"\n   },\n   \"devDependencies\": {\n-    \"@types/react\": \"^18.2.15\",\n+    \"@types/react\": \"^18.2.37\",\n     \"@types/react-dom\": \"^18.2.7\",\n     \"typescript\": \"^5.0.2\"\n   }",
      "changes": "- Added @radix-ui/react-avatar dependency for Avatar component functionality\n- Added @radix-ui/react-badge dependency for Badge component styling\n- Added class-variance-authority for component variant management\n- Added clsx utility for conditional className handling\n- Added tailwind-merge for Tailwind class merging and deduplication\n- Updated @types/react to latest version for improved TypeScript support\n- All new dependencies support the enhanced UserProfile component features"
    }
  ]
}