apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aideator.fullname" . }}
  labels:
    {{- include "aideator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "aideator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "aideator.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "aideator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      initContainers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Running database migrations..."
              # Check if alembic_version table exists
              if python -c "
              import asyncio
              import sys
              sys.path.insert(0, '/app')
              from app.core.database import AsyncSessionFactory
              from sqlalchemy import text
              
              async def check_alembic_version():
                  async with AsyncSessionFactory() as session:
                      try:
                          result = await session.execute(text('SELECT version_num FROM alembic_version LIMIT 1'))
                          version = result.scalar()
                          print(f'Database is at version: {version}')
                          return True
                      except Exception as e:
                          print(f'alembic_version table not found: {e}')
                          return False
              
              asyncio.run(check_alembic_version())
              "; then
                echo "Database migration state found, running upgrade..."
                python -m alembic upgrade head
              else
                echo "Database migration state not found, stamping existing database..."
                python -m alembic stamp head
              fi
              echo "Migrations completed successfully!"
          env:
            - name: DATABASE_URL
              value: {{ .Values.database.url }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: secret-key
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel }}
            - name: DEBUG
              value: "{{ .Values.config.debug }}"
            - name: API_V1_PREFIX
              value: {{ .Values.config.apiV1Prefix }}
            - name: MAX_VARIATIONS
              value: "{{ .Values.config.maxVariations }}"
            - name: DATABASE_URL
              value: {{ .Values.database.url }}
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AGENT_IMAGE
              value: "{{ .Values.agentImage.repository }}:{{ .Values.agentImage.tag }}"
            # OpenRouter removed - using LiteLLM with direct OpenAI SDK
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.openai.name }}
                  key: {{ .Values.secrets.openai.key }}
                  optional: {{ .Values.secrets.openai.optional | default true }}
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.anthropic.name }}
                  key: {{ .Values.secrets.anthropic.key }}
                  optional: {{ .Values.secrets.anthropic.optional | default true }}
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.gemini.name }}
                  key: {{ .Values.secrets.gemini.key }}
                  optional: {{ .Values.secrets.gemini.optional | default true }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: secret-key
            {{- if .Values.env }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /app/data
            {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "aideator.fullname" . }}-data
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}