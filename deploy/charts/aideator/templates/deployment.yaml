apiVersion: apps/v1
kind: Deployment
metadata:
  name: aideator-fastapi
  labels:
    {{- include "aideator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "aideator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "aideator.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: fastapi
    spec:
      serviceAccountName: {{ include "aideator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      initContainers:
        - name: wait-for-postgres
          image: postgres:15
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              export PGPASSWORD="aideator123"
              
              until pg_isready -h chart-aideator-postgresql -p 5432 -U aideator; do
                echo "PostgreSQL not ready yet, waiting..."
                sleep 5
              done
              
              echo "Checking if database exists and is accessible..."
              until psql -h chart-aideator-postgresql -p 5432 -U aideator -d aideator -c "SELECT 1;" > /dev/null 2>&1; do
                echo "Database not accessible yet, waiting..."
                sleep 5
              done
              
              echo "PostgreSQL is ready and accessible!"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
        - name: wait-for-litellm-tables
          image: postgres:15
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for LiteLLM to create its database tables..."
              export PGPASSWORD="aideator123"
              
              # Check if LiteLLM-specific tables exist
              until psql -h chart-aideator-postgresql -p 5432 -U aideator -d aideator -c "\dt" | grep -E "(LiteLLM_|litellm_)"; do
                echo "LiteLLM database tables not found, waiting..."
                sleep 10
              done
              
              echo "LiteLLM database tables found!"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              set -e  # Exit on error
              echo "Running database migrations..."
              python -m alembic upgrade head || { echo "Migration failed!"; exit 1; }
              echo "Migrations completed successfully!"
          env:
            - name: DEBUG
              value: "{{ .Values.config.debug }}"
            - name: DATABASE_URL
              value: {{ .Values.database.url }}
            - name: DEBUG
              value: "{{ .Values.config.debug }}"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: secret-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: encryption-key
            - name: REDIS_URL
              value: "redis://chart-redis-master:6379/0"
            # Use placeholder API keys to satisfy validation during migration
            - name: OPENAI_API_KEY
              value: "sk-placeholder-for-migrations-only-00000000000000000000"
            - name: ANTHROPIC_API_KEY
              value: "sk-ant-placeholder-for-migrations-only-000000000000000"
            - name: GEMINI_API_KEY
              value: "AIzaPlaceholderForMigrationsOnly00000000000"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: LOG_LEVEL
              value: {{ .Values.config.logLevel }}
            - name: DEBUG
              value: "{{ .Values.config.debug }}"
            - name: AIDEATOR_DEV_MODE
              value: "{{ .Values.config.debug }}"
            - name: API_V1_PREFIX
              value: {{ .Values.config.apiV1Prefix }}
            - name: MAX_VARIATIONS
              value: "{{ .Values.config.maxVariations }}"
            - name: DATABASE_URL
              value: {{ .Values.database.url }}
            # SECURITY TRADEOFF: Using hardcoded Redis URL for development simplicity
            # In production, use ConfigMap or Secret for Redis credentials
            - name: REDIS_URL
              value: "redis://chart-redis-master:6379/0"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AGENT_IMAGE
              value: "{{ .Values.agentImage.repository }}:{{ .Values.agentImage.tag }}"
            # API keys stored in database, not environment variables
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: secret-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: aideator-secret
                  key: encryption-key
            # LiteLLM configuration for model sync
            - name: LITELLM_PROXY_URL
              value: "http://{{ include "aideator.fullname" . }}-litellm:4000"
            - name: LITELLM_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "aideator.fullname" . }}-litellm-secret
                  key: master-key
            - name: GITHUB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: github-oauth-secret
                  key: client-id
            - name: GITHUB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: github-oauth-secret
                  key: client-secret
            {{- if .Values.env }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /app/data
            {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "aideator.fullname" . }}-data
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}